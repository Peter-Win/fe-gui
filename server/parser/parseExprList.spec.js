const {expect} = require('chai')
const {parseExprList} = require('./parseExpression')
const {ReaderCtx} = require('./ReaderCtx')

describe('parseExprList', () => {
    it('function arguments', () => {
        const reader = ReaderCtx.fromText('x, y+1, 2)')
        const list = parseExprList(reader, ')', [','])
        expect(list).to.be.lengthOf(3)
        expect(list[0].toString()).to.equal('TxName:x')
        expect(list[0].stopper).to.equal(',')
        expect(list[1].toString()).to.equal('TxBinOp:+ (TxName:y, TxConst:1)')
        expect(list[2].toString()).to.equal('TxConst:2')
        expect(list[2].stopper).to.equal(')')
    })
    it('object', () => {
        const reader = ReaderCtx.fromText('{name, value: name+"!"}')
        reader.readLexem()
        const list = parseExprList(reader, '}', [',', ':'])
        expect(list).to.be.lengthOf(3)
        expect(list[0].toString()).to.equal('TxName:name')
        expect(list[0].stopper).to.equal(',')
        expect(list[1].toString()).to.equal('TxName:value')
        expect(list[1].stopper).to.equal(':')
        expect(list[2].toString()).to.equal('TxBinOp:+ (TxName:name, TxConst:"!")')
        expect(list[2].stopper).to.equal('}')
    })
    it('empty list', () => {
        const reader = ReaderCtx.fromText('[]')
        reader.readLexem()
        const list = parseExprList(reader, ']', [','])
        expect(list).to.be.lengthOf(0)
    })
    it('list with empty items', () => {
        const reader = ReaderCtx.fromText('[, x]')
        reader.readLexem()
        const list = parseExprList(reader, ']', [','], {canEmpty: true})
        expect(list).to.be.lengthOf(2)
        expect(list[0].toString()).to.equal(':')
        expect(list[1].toString()).to.equal('TxName:x')
    })
})
